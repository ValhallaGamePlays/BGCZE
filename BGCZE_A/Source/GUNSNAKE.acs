#library "gunsnake"
#include "zdefs.acs"
#include "zspecial.acs"

// -----------------------------------------------------------------------------
//
// Snake game  written by KeksDose
// Version DX Gold Plated Hyper Arcade Championship Turbo Edition
//
// 21 / 4 / 2014
//
// Yeah, you can basically play Snake in DOOM now. Big deal. I wrote a version
// of this 30 / 3 / 2014, but the codebase was pretty awful. This is a rewrite.
// (Best viewed with tab space 4)
//
// Reuse as you wish, but keep the source file intact (this file, gunsnake.acs)
// and credit me somewhere (KeksDose).
//
// -----------------------------------------------------------------------------

#libdefine SN_MAXPLAYERS	32

#libdefine SN_ANIMCOUNT		64

#libdefine SN_SCORESCOUNT	10

#libdefine SN_UPDATEDELAY	1

#libdefine SN_TILESHOR		16
#libdefine SN_TILESVER		12

#libdefine SN_SNAKESIZES	3
#libdefine SN_SNAKELENGTH	4
#libdefine SN_SNAKEMOVETICS	4
#libdefine SN_SNAKEEXPTICS	4

#libdefine SN_PRIZECOUNT	5

#libdefine SN_HUDWIDTH		800
#libdefine SN_HUDHEIGHT		600
#libdefine SN_HUDLEFT		272.1
#libdefine SN_HUDTOP		172.1
#libdefine SN_HUDRIGHT		528.1
#libdefine SN_HUDBOTTOM		460.1
#libdefine SN_HUDCLIPX		272
#libdefine SN_HUDCLIPY		172
#libdefine SN_HUDCLIPWIDTH	256
#libdefine SN_HUDCLIPHEIGHT	192
#libdefine SN_HUDIDSTART	85000
#libdefine SN_HUDIDGAMEOVER SN_HUDIDSTART
#libdefine SN_HUDIDCREDITFX	SN_HUDIDGAMEOVER + 1
#libdefine SN_HUDIDCREDIT	SN_HUDIDCREDITFX + 1
#libdefine SN_HUDIDTHXFX	SN_HUDIDCREDIT + 1
#libdefine SN_HUDIDTHX		SN_HUDIDTHXFX + 1
#libdefine SN_HUDIDCR1A		SN_HUDIDTHX + 1
#libdefine SN_HUDIDCR1B		SN_HUDIDCR1A + 1
#libdefine SN_HUDIDCR2A		SN_HUDIDCR1B + 1
#libdefine SN_HUDIDCR2B		SN_HUDIDCR2A + 1
#libdefine SN_HUDIDFOOD		SN_HUDIDCR2B + 1
#libdefine SN_HUDIDSNAKEFX	SN_HUDIDFOOD + 1
#libdefine SN_HUDIDSNAKE	SN_HUDIDSNAKEFX + SN_TILESHOR * SN_TILESVER
#libdefine SN_HUDIDLINESHOR	SN_HUDIDSNAKE + SN_TILESHOR * SN_TILESVER
#libdefine SN_HUDIDSCORE	SN_HUDIDLINESHOR + 1
#libdefine SN_HUDIDTITLEFX	SN_HUDIDSCORE + 1
#libdefine SN_HUDIDTITLE	SN_HUDIDTITLEFX + 1
#libdefine SN_HUDIDPRESSFX	SN_HUDIDTITLE + 1
#libdefine SN_HUDIDPRESS	SN_HUDIDPRESSFX + 1
#libdefine SN_HUDIDSCORESFX	SN_HUDIDPRESS + 1
#libdefine SN_HUDIDSCORES	SN_HUDIDSCORESFX + 1
#libdefine SN_HUDIDSCVAL	SN_HUDIDSCORES + 1
#libdefine SN_HUDIDSCNAME	SN_HUDIDSCVAL + SN_SCORESCOUNT
#libdefine SN_HUDIDTITLEBG1	SN_HUDIDSCNAME + SN_SCORESCOUNT
#libdefine SN_HUDIDTITLEBG2	SN_HUDIDTITLEBG1 + 1
#libdefine SN_HUDIDPRIZEFX	SN_HUDIDTITLEBG2 + 1
#libdefine SN_HUDIDPRIZE	SN_HUDIDPRIZEFX + 1
#libdefine SN_HUDIDPRIZEMFX	SN_HUDIDPRIZE + 1
#libdefine SN_HUDIDPRIZEMSG	SN_HUDIDPRIZEMFX + 1
#libdefine SN_HUDIDPRIZETFX	SN_HUDIDPRIZEMSG + 1
#libdefine SN_HUDIDPRIZETTL	SN_HUDIDPRIZETFX + 1
#libdefine SN_HUDIDFRAME	SN_HUDIDPRIZETTL + 1
#libdefine SN_HUDIDEND		SN_HUDIDFRAME + 1
#libdefine SN_HUDIDANIM		SN_HUDIDSTART - SN_ANIMCOUNT - 1
#libdefine SN_HUDIDANIMEND	SN_HUDIDANIM + SN_ANIMCOUNT

#libdefine SN_OFFCENTREX	-0.1 + 128.0
#libdefine SN_OFFCENTREY	-0.1 + 96.0
#libdefine SN_OFFRIGHT		256.1
#libdefine SN_OFFBOTTOM		192.1

#libdefine SN_STPRESENTS	1
#libdefine SN_STTITLE		2
#libdefine SN_STSCORES		3
#libdefine SN_STCREDITS		4
#libdefine SN_STPLAYTIME	5
#libdefine SN_STGAMEOVER	6
#libdefine SN_STPRIZE		7
#libdefine SN_STUNLOADING	666

#libdefine SN_BTCONFIRM		BT_ATTACK | BT_ALTATTACK
#libdefine SN_BTCANCEL		BT_USE | BT_JUMP
#libdefine SN_BTLEFT		BT_MOVELEFT | BT_LEFT
#libdefine SN_BTRIGHT		BT_MOVERIGHT | BT_RIGHT
#libdefine SN_BTUP			BT_FORWARD
#libdefine SN_BTDOWN		BT_BACK

#libdefine SN_DIRUP			0
#libdefine SN_DIRRIGHT		1
#libdefine SN_DIRDOWN		2
#libdefine SN_DIRLEFT		3

int snPrizeScores[SN_PRIZECOUNT] = { 20, 40, 50, 60, 70 };
str snPrizeInventory[SN_PRIZECOUNT] = { "HBackpack", "TomeOfPowah",
	"GunzerkPot",	"Ironblast",	"TibCore" };

str snGfxSmallFont	= "smallfont";
str snGfxBigFont	= "bigfont";
str snGfxFrame		= "snakefrm";
str snGfxLinesHor	= "snaketbg";
str snGfxTitle		= "snakettl";
str snGfxFood		= "wizard1";
str snGfxHeadPiece[4] = { "dragonu", "dragonr", "dragond", "dragonl" };
str snGfxPieceSizes[SN_SNAKESIZES] = { "dragonp3", "dragonp2", "dragonp" };
str snGfxPrizes[SN_PRIZECOUNT] = { "BPAKB0", "TOMEP0", "IRNGX0", "BFGGX0", "BTIBA0" };
str snGfxExplosion[8] = { "snboom1", "snboom2", "snboom3", "snboom4",
"snboom5", "snboom6", "snboom7", "snboom8" };

str snSfxEat		= "wizard/death";
str snSfxExplode	= "weapons/blasterpowhit";

int snDirKeys[4] = { SN_BTUP, SN_BTRIGHT, SN_BTDOWN, SN_BTLEFT };
int snDirs[4] = { SN_DIRUP, SN_DIRRIGHT, SN_DIRDOWN, SN_DIRLEFT };
int snDirOpp[4] = { SN_DIRDOWN, SN_DIRLEFT, SN_DIRUP, SN_DIRRIGHT };
int snMoveOffset[4][2] = { {0, -1}, {1, 0}, {0, 1}, {-1, 0} };

// Global variables ------------------------------------------------------------

int snTimer[SN_MAXPLAYERS];
int snMoveTimer[SN_MAXPLAYERS];
int snExplodeTimer[SN_MAXPLAYERS];
int snState[SN_MAXPLAYERS];
int snPressed[SN_MAXPLAYERS];
int snTiles[SN_MAXPLAYERS][SN_TILESHOR][SN_TILESVER];
int snSnakeDir[SN_MAXPLAYERS];
int snSnakeLength[SN_MAXPLAYERS];
int snSnakeXPos[SN_MAXPLAYERS];
int snSnakeYPos[SN_MAXPLAYERS];
int snFoodXPos[SN_MAXPLAYERS];
int snFoodYPos[SN_MAXPLAYERS];
int snAlive[SN_MAXPLAYERS];
int snScores[SN_MAXPLAYERS];
int snPrize[SN_MAXPLAYERS];
str snScoreNames[SN_MAXPLAYERS][SN_SCORESCOUNT];
int snScoreValues[SN_MAXPLAYERS][SN_SCORESCOUNT];

// Initialization and unloading functions --------------------------------------

function void SnakeTimedStateChange(int player, int time, int state, int rs)
{
	if(snTimer[player] % time == 0)
	{
		snState[player] = state;
		snTimer[player] = 0;
		
		if(rs)
			SnakeReset(player);
	}
}

function void SnakeButtonStateChange(int player, int button, int state, int rs)
{
	if(snPressed[player] & button)
	{
		snState[player] = state;
		snTimer[player] = 0;
		
		if(rs)
			SnakeReset(player);
	}
}

function void SnakeRandomizeFood(int player)
{
	int foodX = 0;
	int foodY = 0;
	
	do
	{
		foodX = Random(0, SN_TILESHOR - 1);
		foodY = Random(0, SN_TILESVER - 1);
	} while(snTiles[player][foodX][foodY]);
	
	snFoodXPos[player] = foodX;
	snFoodYPos[player] = foodY;
}

function void SnakeReset(int player)
{
	snSnakeLength[player] = SN_SNAKELENGTH;
	snAlive[player] = true;
	snSnakeXPos[player] = 8;
	snSnakeYPos[player] = 6;
	snSnakeDir[player] = 0;
	snMoveTimer[player] = 0;
	snExplodeTimer[player] = 0;
	snScores[player] = 0;
	snPrize[player] = 0;
	
	SnakeRandomizeFood(player);
	
	int x = 0;
	int y = 0;
	
	for(x = 0; x < SN_TILESHOR; x++)
		for(y = 0; y < SN_TILESVER; y++)
			snTiles[player][x][y] = 0;
}

function void SnakeTryPushScore(int player)
{
	int i = 0;
	int pos = 0;
	
	for(i = 0; i < SN_SCORESCOUNT; i++)
	{
		if(snScores[player] > snScoreValues[player][i])
		{
			pos = i;
			
			for(i = SN_SCORESCOUNT - 1; i > pos; i--)
			{
				snScoreValues[player][i] = snScoreValues[player][i - 1];
				snScoreNames[player][i] = snScoreNames[player][i - 1];
			}
			
			snScoreValues[player][pos] = snScores[player];
			snScoreNames[player][pos] = strParam(n:0);
			
			break;
		}
	}
}

function void SnakeBuildScoreList(int player)
{
	int i = 0;
	
	for(i = 0; i < SN_SCORESCOUNT; i++)
	{
		snScoreNames[player][i] = GetUserCVarString(0,
									strParam(s:"KD_SnakeName", d:i + 1));
		snScoreValues[player][i] = GetUserCVar(0,
									strParam(s:"KD_SnakeScore", d:i + 1));
	}
}

function void SnakeSaveScoreList(int player)
{
	int i = 0;
	
	for(i = 0; i < SN_SCORESCOUNT; i++)
	{
		SetUserCVarString(0,strParam(s:"KD_SnakeName", d:i + 1),
							snScoreNames[player][i]);
		SetUserCVar(0, strParam(s:"KD_SnakeScore", d:i + 1),
							snScoreValues[player][i]);
	}
}

function void SnakeSetup(int player)
{
	SetHudSize(SN_HUDWIDTH, SN_HUDHEIGHT, true);
	SetPlayerProperty(0, true, PROP_TOTALLYFROZEN);
	
	SnakeBuildScoreList(player);
	SnakeReset(player);
}

function void SnakeUnload(int player)
{
	SetPlayerProperty(0, false, PROP_TOTALLYFROZEN);
	SnakeSaveScoreList(player);
}

function void SnakeClearScreen(void)
{
	int i = 0;
	
	for(i = SN_HUDIDSTART; i < SN_HUDIDEND; i++)
		HudMessage(s:""; 0, i, 0, 0, 0, 0);
}

// Periphery functions ---------------------------------------------------------

function void SnakeGetInput(int player)
{
	snPressed[player]	= GetPlayerInput(-1, INPUT_BUTTONS)
						&~GetPlayerInput(-1, INPUT_OLDBUTTONS);
}

// Drawing functions -----------------------------------------------------------

function void SnakeDrawGfx(int x, int y, int id)
{
	HudMessage(s:"a"; HUDMSG_PLAIN, id, CR_UNTRANSLATED,
				SN_HUDLEFT + x, SN_HUDTOP + y, 0);
}

function void SnakeDrawGfxAdd(int x, int y, int id, int alpha)
{
	HudMessage(s:"a"; HUDMSG_ALPHA | HUDMSG_ADDBLEND, id, CR_UNTRANSLATED,
				SN_HUDLEFT + x, SN_HUDTOP + y, 0, alpha);
}

function void SnakeDrawText(str msg, int x, int y, int id, int color)
{
	HudMessage(s:msg; HUDMSG_PLAIN, id, color,
				SN_HUDLEFT + x, SN_HUDTOP + y, 0);
}

function void SnakeDrawTextAdd(str msg, int x, int y,
								int id, int color, int alpha)
{
	HudMessage(s:msg; HUDMSG_ALPHA | HUDMSG_ADDBLEND, id, color,
				SN_HUDLEFT + x, SN_HUDTOP + y, 0, alpha);
}

// Actual game stuff being drawn onto the screen -------------------------------

function void SnakeDrawFrame(void)
{
	SetHudClipRect(0, 0, 0, 0);
	SetFont(snGfxFrame);
	SnakeDrawGfx(-8.0, -8.0, SN_HUDIDFRAME);
	SetHudClipRect(SN_HUDCLIPX, SN_HUDCLIPY, SN_HUDCLIPWIDTH, SN_HUDCLIPHEIGHT);
}

function void SnakeDrawTitleBackground(void)
{
	static int offset;
	
	offset = (offset + 8.0) % 256.0;
	
	SetFont(snGfxLinesHor);
	SnakeDrawGfx(offset, 0, SN_HUDIDTITLEBG1);
	SnakeDrawGfx(offset - 256.0, 0, SN_HUDIDTITLEBG2);
}

function void SnakeDrawTitle(void)
{
	static int alpha;
	
	alpha = sin(timer() * 0.05 % 0.5);
	
	SetFont(snGfxTitle);
	SnakeDrawGfx(SN_OFFCENTREX, 40.0, SN_HUDIDTITLE);
	SnakeDrawGfxAdd(SN_OFFCENTREX, 40.0, SN_HUDIDTITLEFX, alpha);
	SetFont(snGfxSmallFont);
	SnakeDrawText("Press start!", SN_OFFCENTREX, SN_OFFBOTTOM - 20.0,
					SN_HUDIDPRESS, CR_RED);
	SnakeDrawTextAdd("Press start!", SN_OFFCENTREX, SN_OFFBOTTOM - 20.0,
						SN_HUDIDPRESSFX, CR_YELLOW, alpha);
}

function void SnakeDrawScores(int player)
{
	static int alpha;
	
	alpha = sin(timer() * 0.05 % 0.5);
	
	SetFont(snGfxBigFont);
	SnakeDrawText("Highscores", SN_OFFCENTREX, 0, SN_HUDIDSCORES, CR_RED);
	SnakeDrawTextAdd("Highscores", SN_OFFCENTREX, 0, SN_HUDIDSCORESFX,
					CR_YELLOW, alpha);
	
	SetFont(snGfxSmallFont);
	
	int i = 0;
	
	for(i = 0; i < SN_SCORESCOUNT; i++)
	{
		SnakeDrawText(snScoreNames[player][i], 10.0, 35.0 + i * 15.0,
						SN_HUDIDSCNAME + i, CR_RED);
		SnakeDrawText(strParam(d:snScoreValues[player][i]), SN_OFFRIGHT - 10.0,
						35.0 + i * 15.0, SN_HUDIDSCVAL + i, CR_RED);
	}
}

function void SnakeDrawCredits(void)
{
	static int alpha;
	
	alpha = sin(timer() * 0.05 % 0.5);
	
	SetFont(snGfxBigFont);
	SnakeDrawText("Credits", SN_OFFCENTREX, 0, SN_HUDIDCREDIT, CR_RED);
	SnakeDrawTextAdd("Credits", SN_OFFCENTREX, 0, SN_HUDIDCREDITFX,
					CR_YELLOW, alpha);
	SnakeDrawText("Thanks for playing", SN_OFFCENTREX, SN_OFFBOTTOM - 10.0,
					SN_HUDIDTHX, CR_RED);
	SnakeDrawTextAdd("Thanks for playing", SN_OFFCENTREX, SN_OFFBOTTOM - 10.0,
					SN_HUDIDTHXFX, CR_YELLOW, alpha);
	
	SetFont(snGfxSmallFont);
	SnakeDrawText("Programmed by", 10.0, 30.0, SN_HUDIDCR1A, CR_RED);
	SnakeDrawText("Graphics", 10.0, 50.0, SN_HUDIDCR2A, CR_RED);
	SnakeDrawText("KeksDose", SN_OFFRIGHT - 10.0, 30.0, SN_HUDIDCR1B, CR_RED);
	SnakeDrawText("Heretic\nSecret of Mana\nDoom Nukem\nKeksDose",
					SN_OFFRIGHT - 10.0, 50.0, SN_HUDIDCR2B, CR_RED);
}

function void SnakeDrawSnake(int player)
{
	int x = 0;
	int y = 0;
	
	for(y = 0; y < SN_TILESVER; y++)
	{
		for(x = 0; x < SN_TILESHOR; x++)
		{
			int tile = snTiles[player][x][y];
			
			if(tile <= 0)
				continue;
			
			int id = y * SN_TILESHOR + x;
			int length = snSnakeLength[player];
			int alpha = sin((tile + Timer()) * 0.01 % 0.5);
			
			if(tile == length)
				SetFont(snGfxHeadPiece[snSnakeDir[player]]);
			
			else
			{
				int sizeIndex = tile * SN_SNAKESIZES / length;
				
				SetFont(snGfxPieceSizes[sizeIndex]);
			}
			
			SnakeDrawGfx(x * 16.0, y * 16.0, id + SN_HUDIDSNAKE);
			SnakeDrawGfxAdd(x * 16.0, y * 16.0, id + SN_HUDIDSNAKEFX, alpha);
		}
	}
}

function void SnakeDrawFood(int player)
{
	SetFont(snGfxFood);
	SnakeDrawGfx(snFoodXPos[player] * 16.0,
					snFoodYPos[player] * 16.0, SN_HUDIDFOOD);
}

function void SnakeDrawCurrentScore(int player)
{
	str msg = strParam(s:"Wazards: ", d:snScores[player]);
	
	SetFont(snGfxBigFont);
	SnakeDrawText(msg, SN_OFFCENTREX, 0, SN_HUDIDSCORE, CR_RED);
}

function void SnakeDrawPrize(int player)
{
	static int alpha;
	
	alpha = sin(timer() * 0.05 % 0.5);
	
	SetFont(snGfxBigFont);
	SnakeDrawText("Prizes", SN_OFFCENTREX, 0, SN_HUDIDPRIZETTL, CR_RED);
	SnakeDrawTextAdd("Prizes", SN_OFFCENTREX, 0, SN_HUDIDPRIZETFX,
					CR_YELLOW, alpha);
	
	SetFont(snGfxPrizes[snPrize[player]]);
	
	if(snScores[player] >= snPrizeScores[snPrize[player]])
	{
		SnakeDrawGfx(SN_OFFCENTREX, SN_OFFCENTREY, SN_HUDIDPRIZE);
		SnakeDrawGfxAdd(SN_OFFCENTREX, SN_OFFCENTREY, SN_HUDIDPRIZEFX, alpha);
		SetFont(snGfxSmallFont);
		SnakeDrawText("You got it!", SN_OFFCENTREX, SN_OFFBOTTOM - 40.0,
						SN_HUDIDPRIZEMSG, CR_RED);
		SnakeDrawTextAdd("You got it!", SN_OFFCENTREX, SN_OFFBOTTOM - 40.0,
						SN_HUDIDPRIZEMFX, CR_YELLOW, alpha);
	}
	
	else
	{
		SnakeDrawGfxAdd(SN_OFFCENTREX, SN_OFFCENTREY, SN_HUDIDPRIZE, 0.5);
		SetFont(snGfxSmallFont);
		SnakeDrawText("Kill more wazards to\nacquire higher prizes!",
				SN_OFFCENTREX, SN_OFFBOTTOM - 39.6, SN_HUDIDPRIZEMSG, CR_RED);
	}
}

function void SnakeDrawGameOver(void)
{
	SetFont(snGfxBigFont);
	SnakeDrawText("Game Over", SN_OFFCENTREX, SN_OFFCENTREY, SN_HUDIDGAMEOVER,
					CR_RED);
}

// Different screen logics -----------------------------------------------------

function void SnakeTitleLogic(int player)
{
	SnakeTimedStateChange(player, 350, SN_STSCORES, true);
	SnakeButtonStateChange(player, SN_BTCONFIRM, SN_STPLAYTIME, true);
	SnakeButtonStateChange(player, SN_BTCANCEL, SN_STUNLOADING, true);
}

function void SnakeScoresLogic(int player)
{
	SnakeTimedStateChange(player, 350, SN_STCREDITS, true);
	SnakeButtonStateChange(player, SN_BTCONFIRM, SN_STPLAYTIME, true);
	SnakeButtonStateChange(player, SN_BTCANCEL, SN_STUNLOADING, true);
}

function void SnakeGamePlayerControlLogic(int player)
{
	int i = 0;
	
	for(i = 0; i < 4; i++)
	{
		if(snPressed[player] & snDirKeys[i] &&
			snSnakeDir[player] != snDirOpp[i])
		{
			snSnakeDir[player] = snDirs[i];
			snMoveTimer[player] = 0;
			break;
		}
	}
}

function void SnakeGameMovementLogic(int player)
{
	if(snMoveTimer[player]++ % SN_SNAKEMOVETICS == 0)
	{
		int x = snSnakeXPos[player];
		int y = snSnakeYPos[player];
		int direction = snSnakeDir[player];
		
		x = (x + snMoveOffset[direction][0]) % SN_TILESHOR;
		y = (y + snMoveOffset[direction][1]) % SN_TILESVER;
		
		if(x < 0)
			x = SN_TILESHOR - 1;
		
		else if(y < 0)
			y = SN_TILESVER - 1;
		
		if(snTiles[player][x][y] > 0)
			snAlive[player] = false;
		
		snSnakeXPos[player] = x;
		snSnakeYPos[player] = y;
		
		int i = 0;
		int j = 0;
		
		for(i = 0; i < SN_TILESHOR; i++)
			for(j = 0; j < SN_TILESVER; j++)
				if(snTiles[player][i][j])
					snTiles[player][i][j]--;
		
		snTiles[player][x][y] = snSnakeLength[player];
	}
}

function void SnakeGameFoodLogic(int player)
{
	if(snSnakeXPos[player] == snFoodXPos[player] &&
		snSnakeYPos[player] == snFoodYPos[player])
	{
		snSnakeLength[player]++;
		snScores[player]++;
		
		PlaySound(0, snSfxEat, CHAN_BODY, 1.0);
		ACS_NamedExecuteAlways("KD Snake Explosion", 0,
								snSnakeXPos[player] * 16.0,
								snSnakeYPos[player] * 16.0);
		SnakeRandomizeFood(player);
	}
}

function void SnakeGameLoseLogic(int player)
{
	if(snAlive[player])
		return;
	
	SnakeTryPushScore(player);
	
	snState[player] = SN_STGAMEOVER;
	snTimer[player] = 0;
}

function void SnakeGameLogic(int player)
{
	SnakeButtonStateChange(player, SN_BTCANCEL, SN_STUNLOADING, true);
	SnakeGamePlayerControlLogic(player);
	SnakeGameMovementLogic(player);
	SnakeGameFoodLogic(player);
	SnakeGameLoseLogic(player);
}

function void SnakeScriptedSnakeLogic(int player)
{
	int x = snSnakeXPos[player];
	int y = snSnakeYPos[player];
	int foodX = snFoodXPos[player];
	int foodY = snFoodYPos[player];
	int dir = snSnakeDir[player];
	
	if(x < foodX && dir != SN_DIRLEFT)
		dir = SN_DIRRIGHT;
	else if(x > foodX && dir != SN_DIRRIGHT)
		dir = SN_DIRLEFT;
	else if(y < foodY && dir != SN_DIRUP)
		dir = SN_DIRDOWN;
	else if(y > foodY && dir != SN_DIRDOWN)
		dir = SN_DIRUP;
	
	snSnakeDir[player] = dir;
}

function void SnakeCreditsLogic(int player)
{
	SnakeButtonStateChange(player, SN_BTCANCEL, SN_STUNLOADING, true);
	SnakeTimedStateChange(player, 700, SN_STTITLE, true);
	SnakeScriptedSnakeLogic(player);
	SnakeGameMovementLogic(player);
	SnakeGameFoodLogic(player);
}

function void SnakeExplodeSnakeLogic(int player)
{
	if(Timer() % SN_SNAKEEXPTICS != 0)
	{
		return;
	}
	
	snExplodeTimer[player]++;
	
	int x = 0;
	int y = 0;
	
	for(x = 0; x < SN_TILESHOR; x++)
	{
		for(y = 0; y < SN_TILESVER; y++)
		{
			if(snExplodeTimer[player] == snTiles[player][x][y])
			{
				ACS_NamedExecuteAlways("KD Snake Explosion", 0, x * 16.0, y * 16.0);
				snTiles[player][x][y] = 0;
				return;
			}
		}
	}
}

function void SnakeGameOverLogic(int player)
{
	SnakeExplodeSnakeLogic(player);
	SnakeButtonStateChange(player, SN_BTCANCEL, SN_STUNLOADING, true);
	SnakeButtonStateChange(player, SN_BTCONFIRM, SN_STPRIZE, false);
}

function void SnakePrizeLogic(int player)
{
	if(snPressed[player] & SN_BTCONFIRM)
	{
		if(snScores[player] >= snPrizeScores[snPrize[player]])
		{
			GiveInventory(snPrizeInventory[snPrize[player]], 1);
			snPrize[player]++;
			
			if(snPrize[player] == SN_PRIZECOUNT)
			{
				snState[player] = SN_STSCORES;
				snTimer[player] = 0;
			}
		}
		
		else
		{
			snState[player] = SN_STSCORES;
			snTimer[player] = 0;
		}
	}
}

// Finally, the main script where everything comes together --------------------

script "KD Snake" (void)
{
	int running = 1;
	int player = PlayerNumber();
	snState[player] = SN_STTITLE;
	
	SnakeSetup(player);
	
	while(running)
	{
		SnakeClearScreen();
		snTimer[player]++;
		
		switch(snState[player])
		{
			case SN_STPRESENTS:
				break;
			case SN_STTITLE:
				SnakeDrawFrame();
				SnakeDrawTitleBackground();
				SnakeDrawTitle();
				SnakeGetInput(player);
				SnakeTitleLogic(player);
				break;
			case SN_STSCORES:
				SnakeDrawFrame();
				SnakeDrawTitleBackground();
				SnakeDrawScores(player);
				SnakeGetInput(player);
				SnakeScoresLogic(player);
				break;
			case SN_STCREDITS:
				SnakeDrawFrame();
				SnakeGetInput(player);
				SnakeDrawCredits();
				SnakeDrawSnake(player);
				SnakeDrawFood(player);
				SnakeCreditsLogic(player);
				break;
			case SN_STPLAYTIME:
				SnakeDrawFrame();
				SnakeGetInput(player);
				SnakeDrawSnake(player);
				SnakeDrawFood(player);
				SnakeDrawCurrentScore(player);
				SnakeGameLogic(player);
				break;
			case SN_STGAMEOVER:
				SnakeGetInput(player);
				SnakeDrawFrame();
				SnakeDrawSnake(player);
				SnakeDrawCurrentScore(player);
				SnakeDrawGameOver();
				SnakeGameOverLogic(player);
				break;
			case SN_STPRIZE:
				SnakeGetInput(player);
				SnakeDrawFrame();
				SnakeDrawPrize(player);
				SnakePrizeLogic(player);
				break;
			case SN_STUNLOADING:
				SnakeUnload(player);
				running = 0;
				break;
		}
		
		Delay(const:SN_UPDATEDELAY);
	}
}

script "KD Snake Explosion" (int x, int y)
{
	static int count;
	int id = count;
	int frame = 0;
	
	count = (count + 1) % SN_ANIMCOUNT;
	
	SetHudSize(SN_HUDWIDTH, SN_HUDHEIGHT, true);
	PlaySound(0, snSfxExplode, CHAN_AUTO, 1.0);
	
	for(frame = 0; frame < 8; frame++)
	{
		SetFont(snGfxExplosion[frame]);
		SnakeDrawGfx(x - 8.0, y - 8.0, SN_HUDIDANIM + id);
		
		Delay(const:3);
	}
	
	HudMessage(s:""; 0, SN_HUDIDANIM + id, 0, 0, 0, 0);
}
