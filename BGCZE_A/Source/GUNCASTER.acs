//Property of Stan423321 - All wrongs reversed. Ask before using it.
//OR ELSE YOU WILL DIE! (Because Pillow said so!)

//Modifications by Zhs2. All-in-one for the good of dargkind!

#library "GUNCASTER"
#include "zcommon.acs"

//#define POUNDTID 384
// Haha that's no longer needed.

global int 59:playerjumpz[];

script "ActivateEverything" (void) {
	CheckGame();
	if(CheckInventory("HexenCounter"))
	{
		TakeInventory("Longhorn",999);
		TakeInventory("LonghornAmmo", 999);
		TakeInventory("LonghornSelected", 999);
	}
	TakeInventory("SheepActive",1);
	TakeInventory("SheepOut",999);
	TakeInventory("SuperSheepOut",999);
	TakeInventory("SheepOut1",1);
	TakeInventory("SheepOut2",1);
	TakeInventory("SheepOut3",1);

	TakeInventory("StormEngaged",999);
	TakeInventory("CasterFamiliarActive",999);
	
	TakeInventory("DynamiteTossCounter",999);
	TakeInventory("DynamiteTossTimer",999);
	
	if(!CheckInventory("GameStarted"))
	{
		GiveInventory("GameStarted",1);
		int lodsamoney = GetCVar("GC_Doshmeter");
		GiveInventory("Dosh",lodsamoney);
	}
	
	if(CheckInventory("IronblastRevert"))
	{
		UseInventory("IronblastRevert");
		TakeInventory("FloaterblastActive",1);
		TakeInventory("AnotherIronblast",1);
		TakeInventory("IronblastStratActive",1);
		if(CheckInventory("HexenCounter"))
		{
			if(CheckInventory("Ironblast2"))
			{
				GiveInventory("IronblastItem",1);
			}
			else
			{
				GiveInventory("Ironblast2Dropped",1);
			}
		}
		else if(CheckInventory("Ironblast"))
		{		
			GiveInventory("IronblastItem",1);
		}
		else
		{
			GiveInventory("IronblastDropped",1);
		}
	}
	
	
	ACS_NamedExecuteAlways("Guncaster", 0, 0, 0, 0);
}

/* fuck this worst idea ever fuck fuck~
script "DeathPenalty" respawn {
		TakeInventory("Dosh",CheckInventory("Dosh")/10);
}
*/

script "AE ENTER" enter {
	ACS_NamedExecuteAlways("ActivateEverything", 0, 0, 0, 0);
}

//Unncomment this for extra fun in any map after dying
/*script "AE RESPAWN" respawn {
	ACS_NamedExecuteAlways("ActivateEverything", 0, 0, 0, 0);
}*/

//Uncomment this for extra fun in Hexen after coming back to a map
/*script "AE RETURN" return {
	ACS_NamedExecuteAlways("ActivateEverything", 0, 0, 0, 0);
}*/

script "CasterTauntTimer" enter {
	TakeInventory("GuncasterTauntTimer",1);
	Delay(const:35);
	restart;
}

script "DatShotgunGotRemoved" enter {
	if(!CheckInventory("IronblastStratActive"))
	{
		UseInventory("IronblastRevert");
		TakeInventory("FloaterblastActive",1);
	}
	Delay(1);
	restart;
}

//The following politely borrowed from Xaser's Necrodoom and modified.
//Thanks for game-specific stuff, ZDoom! Now can we have more?
function void CheckGame (void) // Void because we check, hand the player an inventory item, then never again.
{
	int testTID = UniqueTID();
	SpawnForced("MapSpot",GetActorX(0),GetActorY(0),GetActorZ(0),testTID,0);
	Thing_SpawnNofog(testTID,255,0,testTID);	
	if(ThingCountName("DoomCheck",0))
	{
		GiveInventory("DoomCounter",1);
	}
	if(ThingCountName("HereticCheck",0))
	{
		GiveInventory("HereticCounter",1);
	}
	if(ThingCountName("HexenCheck",0))
	{
		GiveInventory("HexenCounter",1);
	}
	if(ThingCountName("StrifeCheck",0))
	{
		GiveInventory("StrifeCounter",1);
	}
	/*if(ThingCountName("ChexCheck",0))
	{
		GiveInventory("ChexCounter",1);
	}*/ // meh
	Thing_Remove(testTID);
}

function int GetSt(int input_mode) {
	int input = GetPlayerInput(-1, input_mode);
	if (input>0.05) {
		return 1;
	} else if (input<-0.05) {
		return 2;
	}
	return 0;
}

function int GetStEx(void) {
	int st1 = GetSt(INPUT_FORWARDMOVE);
	int st2 = GetSt(INPUT_SIDEMOVE);
	if (st2==0) return st1;
	else if (st1==0) return 2+st2;
	return -1;
}

function int GetAJumpLimit(void) {
	if (CheckInventory("DoomCounter"))
	{
		return 3+CheckInventory("PowerLifter");
	}
	else
	{
		return 3+CheckInventory("WingsOfWrath");
	}
	return 0; // what the fuck are you doing kid
}

function void SetAJumpVel(void) {
	int zvel = GetActorProperty(0, APROP_JumpZ);
	int an = GetActorAngle(0);
	SetActorProperty(0, APROP_Gravity, 0.8);
	int st = GetSt(INPUT_FORWARDMOVE);
	int stx = GetSt(INPUT_SIDEMOVE);
	if (st==0 && stx==0) {
		SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), 
zvel, 0, 0);
	} else {
		if (st==0) {
			if (stx==1) {
				an+=0.75;
			} else {
				an+=0.25;
			}
		} else if (st==1) {
			if (stx==1) {
				an+=0.875;
			} else if (stx==2) {
				an+=0.125;
			}
		} else {
			if (stx==1) {
				an+=0.625;
			} else if (stx==2) {
				an+=0.375;
			} else {
				an+=0.5;
			}
		}
		SetActorVelocity(0, FixedMul(cos(an), 16.0), 
FixedMul(sin(an), 16.0), zvel, 0, 0);
	}
	SetActorProperty(0, APROP_Gravity, 1.0);
}

function void SetGlideSp(void) {
	int an = GetActorAngle(0);
	SetActorVelocity(0, FixedMul(cos(an), 22.0+(11.0*CheckInventory("PowerSuitToken"))), FixedMul(sin(an), 
22.0+(11.0*CheckInventory("PowerSuitToken"))), -2.0, 0, 0);
}

function void ManaRegen(int mcnt) {
	int limit, now, add;
	if ((mcnt%10)>0) {
		return;
	}
	limit = 100+25*CheckInventory("PowerBooster");
	now = CheckInventory("Mana");
	if (now<limit) {
		add = 1+CheckInventory("PowerSurge");
		if (now+add>limit) {
			add = limit-now;
		}
		GiveInventory("Mana", add);
	}
} // Dinosaur alert!

function void ManaRegen2(void) // Zhs2 wuz heer.
{
	int regenticmod;
	switch(GetCvar("GC_ManaRegenSpeed"))
	{
		case 0:
		return;
		
		case 1:
		default:
		regenticmod = 11;
		break;
		
		case 2:
		regenticmod = 10;
		break;
		
		case 3:
		regenticmod = 9;
		break;
		
	}
	
	if ((Timer()%(regenticmod-CheckInventory("PowerSurge")))>0) { return; }
	//if ((Timer()%(11-(CheckInventory("PowerSurge")*2)))>0) { return; }
	// All hail the modulus, will give one mana per 10th tic minus the number of surges
	// And also the timer function, I will allow its use here
	
	GiveInventory("Mana", 1); // Wasn't that easy?
}

function void TakeOtherGameWeapons (void)
{
	if(CheckInventory("HexenCounter"))
	{
		TakeInventory("Longhorn", 9);
		TakeInventory("Strucker", 9);
		TakeInventory("Ironblast", 9);
		TakeInventory("Pulverizer", 9);
		TakeInventory("Matriarch", 9);
		TakeInventory("Cauterizer", 9);
		TakeInventory("Old Dreadful", 9);
	}
	else
	{
		TakeInventory("Longhorn2", 9);
		TakeInventory("Strucker2", 9);
		TakeInventory("Ironblast2", 9);
		TakeInventory("Pulverizer2", 9);
		TakeInventory("Matriarch2", 9);
		TakeInventory("Cauterizer2", 9);
		TakeInventory("Old Dreadful2", 9);
	}
}

script "Guncaster" (void) {
	int a_jumps = 0;
	int input;
	int justice = 0;
	int cnt0 = 0, cnt1 = 0, cnt2 = 0;
	int st0 = 0, st1 = 0, st2 = 0;
	int cnt = 0, st = 0;
	int mcnt = 0;
	int poundstartheight, playerx, playery, poundz, jumpjetting, currentlypounding = 0, currentlygliding = 0; // Zhs2's variables
	
	SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	SetPlayerProperty(0, 0, PROP_FROZEN);
	SetAirControl(0.9);
	if(!playerjumpz[PlayerNumber()])
	{
		playerjumpz[PlayerNumber()] = GetActorProperty(0, APROP_JumpZ);
	}
	while(1) {
	delay(1);
	if(ClassifyActor(0) & ACTOR_ALIVE) // Flying corpses are creepy, unless launched by explosions or catapult.
	{
		//ManaRegen(mcnt++); Stanley's old function. Thanks for all the fish!
		SetActorProperty(0, APROP_SpawnHealth, 100+(CheckInventory("PowerStimulant")*10)); // Delicious health
		SetAmmoCapacity("Mana", 100+(CheckInventory("PowerBooster")*25)); // This is the best ACS function ever
		ManaRegen2(); // Now with approximately 60% less code
		TakeOtherGameWeapons(); // For cheaters and testing convenience
		if (CheckInventory("PowerSuitToken"))
		{
			SetActorProperty(0, APROP_JumpZ, FixedMul(playerjumpz[PlayerNumber()], 1.5)); // Jump 1.5 times the height
			SetActorProperty(0, APROP_Speed, 1.33); // Run 33% faster
		}
		else
		{
			SetActorProperty(0, APROP_JumpZ, playerjumpz[PlayerNumber()]);
			SetActorProperty(0, APROP_Speed, 1.0);
			jumpjetting = 0;
		}
		if(justice!=2)
		{
			TakeInventory("Rocketglide_Emitter", 1);
		}
		if(jumpjetting && (justice == 1))
		{
			GiveInventory("Rocketpack_Emitter", 1);
			--jumpjetting;
		}
		
		if (CheckInventory("StompCooldown")>0) {
			TakeInventory("StompCooldown", 1);
		}
		st = GetStEx();
		if (st==1) {
			GiveInventory("KickDummyForward", 1);
		} else {
			TakeInventory("KickDummyForward", 1);
		}
		if (st==3) {
			GiveInventory("KickDummyRight", 1);
		} else {
			TakeInventory("KickDummyRight", 1);
		}
		if (st==4) {
			GiveInventory("KickDummyLeft", 1);
		} else {
			TakeInventory("KickDummyLeft", 1);
		}
		if (GetActorZ(0)==GetActorFloorZ(0) || (currentlypounding & !GetActorVelZ(0))) { // I hate to extend this with a new variable, but this offers the best available comparison 
			if (justice==3) { //POUND LAND
			poundz = GetActorZ(0);
			if(CheckInventory("PowerBerserkDamage") && CheckInventory("PowerMidasMode")) { GiveInventory("MidasBerserkStompItem",1); }
			else if(CheckInventory("PowerBerserkDamage")) { GiveInventory("BerserkStompItem",1); }
			else if(CheckInventory("PowerMidasMode")) { GiveInventory("MidasStompItem",1); }
			else { GiveInventory("StompItem",1); } //SpawnForced("StompityStomp", playerx, playery, poundz, POUNDTID+PlayerNumber(), 0);
			currentlypounding = false;
			// Here I'm supposing I put the statement for assigning the damage value, but I really really really fucking hate having to do it this way
		} else if (justice==2) { //GLIDE LAND
			
		}
			/*if(justice>0)
			{
				StopSound(0, 7);
			}*/
			a_jumps = 0;
			justice = 0;
		} else {
			input = GetPlayerInput(-1, INPUT_BUTTONS);
			input&=~GetPlayerInput(-1, INPUT_OLDBUTTONS);
			if (justice==0) {
				cnt = 0; cnt0 = 0; cnt1 = 0; cnt2 = 0;
				st0 = st; st1 = st; st2 = st;
				justice = 1;
				SetActorProperty(0, APROP_Gravity, 1.0);
				GiveInventory("StompCooldown", 15);
				continue;
			}
			++cnt;
			if (st!=st0) {
				if (cnt-cnt0<35) {
					if (st0==0 && st2==0 && st==st1) { //cnt2
						if (st==1) {
							justice = 2;
							//GLIDE LAUNCH
						}					
					}
				}
				cnt2 = cnt1; cnt1 = cnt0; cnt0 = cnt;
				st2 = st1; st1 = st0; st0 = st;
			}
			if ((input&BT_CROUCH) && (CheckInventory("StompCooldown")<=0)) {
				justice = 3;
				GiveInventory("StompCooldown", 60);
				//POUND LAUNCH
				ActivatorSound("Stomp/Use",127);
				poundstartheight = GetActorZ(0);
				playerx = GetActorX(0);
				playery = GetActorY(0);
				currentlypounding = true;
			}
			// Requested function, hold jump mid-air to float down slowly - Zhs2
			if ((GetPlayerInput(-1, INPUT_BUTTONS)&BT_JUMP) && (GetPlayerInput(-1, INPUT_OLDBUTTONS)&BT_JUMP) && (GetActorVelZ(0)<0) && (justice!=3)) {
				SetActorProperty(0, APROP_GRAVITY, 0.1);
			}
			else { SetActorProperty(0, APROP_GRAVITY, 1.0); }
			// And now back to Stanley code
			if ((input&BT_JUMP) && (a_jumps<GetAJumpLimit())) {
				a_jumps++;
				justice = 1;
				SetAJumpVel();
				SetActorProperty(0, APROP_Gravity, 0.8);
				if(CheckInventory("PowerSuitToken"))
				{
					ActivatorSound("Bishop/Wings",127); //Power jumping
					jumpjetting = 20; // Give this item for this many tics.
				}
				else
				{
					ActivatorSound("Wings/Movement",127); //AJUMP SOUND
				}
			} else if (justice==2) {
				if (st0==1) {
					SetActorProperty(0, APROP_Gravity, 0.0);
					SetGlideSp();
					if(CheckInventory("PowerSuitToken"))
					{
						//Playsound(0, "Bishop/Glide", 7, 1.0, TRUE, 1.0);
						GiveInventory("Rocketglide_Emitter",1);
					}
				} else {
					justice = 1;
					SetActorProperty(0, APROP_Gravity, 1.0);
				}
			} else if (justice==3) {
				SetActorVelocity(0, 0, 0, -60.0, 0, 0);
				//Hey! Guess what! The terminal velocity (i.e. infinite damage death) in Hexen is 63 u/s!
			}
		}
	}
}
}

script "PowersuitExchange" DEATH
{
	if(CheckInventory("PowerSuitToken"))
	{
		GiveInventory("PowerSuitItem", 1); // Give back the toggle up.
		//TakeInventory("PowerSuitItem2", 1); // And take the toggle down.
	}
	
	if((CheckInventory("PowerSuitItem"))/*|| CheckInventory("PowerSuitItem2"))*/ && GameType() == GAME_NET_DEATHMATCH)
	{
		TakeInventory("PowerSuitItem", 1);
		//TakeInventory("PowerSuitItem2", 1);
		DropItem(0, "PowerSuitItem");
	}
}