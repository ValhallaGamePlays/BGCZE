/*
 * GZDoom Strafing Camera Tilting
 * Copyright (C) 2015 Nash Muhandes
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Feel free to do whatever you want with this, though credits would be
// appreciated! You don't need to ask for my permission to use this code
// in your mods.
// Nash

//PILLOW: Added two lines for cvar check. THANKS NASH I LOVE YOU~ #nohomo
//And a line or two to make it work in midair by Zhs2. Flying like a badass (drunken) dragon.
//And now a few more to make tilting in air a bit more heavy.
//Maximum ground value = 0.00341797, minimum is negative.

#library "qtilt"
#include "zcommon.acs"

//===========================================================================
//
// UTILITY FUNCTIONS
//
//===========================================================================

// player is on ground?
function int CheckPlayerOnGround(void)
{
	int onground;
	if (GetActorZ (0) == GetActorFloorZ (0) || GetActorVelZ(0) == 0 && !Spawn("Z_FloorCheck", GetActorX(0), GetActorY(0), GetActorZ(0) - (4 << 16), 0, GetActorAngle(0)))
	{
		onground = 1;
		//SetFont("SmallFont");
		//Print(s: "on ground");
	}
	else
	{
		onground = 0;
		//SetFont("SmallFont");
		//Print(s: "in air");
	}
	return onground;
}

// get player velocity
function int GetPlayerMoveSpeed(int p)
{
	return VectorLength(GetActorVelX(p), GetActorVelY(p));
}

// input checking
function bool KeyUp(int key)
{
    return !(GetPlayerInput(-1, INPUT_BUTTONS) & key);
}

function bool KeyDown(int key)
{
    return !!(GetPlayerInput(-1, INPUT_BUTTONS) & key);
}


//===========================================================================
//
// STRAFE TILTING
//
//===========================================================================

Script "Script_StrafeTilt" ENTER
{
	while(1)
	{
		if (GetCVar("GC_QuakeStyle"))
		{
			int strafemod;
			int strafe;
			static int strafespeed = 0.0005;

			// receive input
			if (CheckPlayerOnGround() && GetPlayerMoveSpeed(0) > 1.1) // only fast movement will cause tilt
			{
				strafemod = GetPlayerInput(-1, INPUT_SIDEMOVE) / 50;
			}
			else if (!CheckPlayerOnGround() && GetPlayerMoveSpeed(0) > 1.3) // Additional strafemodding for aerial assaults
			{
				strafemod = GetPlayerInput(-1, INPUT_SIDEMOVE) / 25;
			}
			else
			{
			// reset view
				if (strafe < 0)
				{
					strafe += strafespeed;
				
					if (strafe > 0)
					{
						strafe -= strafespeed;
					}
				}
			}

			// tilt left
			if (strafemod < 0 && strafe >= strafemod)
			{
				strafe -= strafespeed;
				if (!CheckPlayerOnGround())
					strafe -= strafespeed*3;
			}

			// tilt right
			if (strafemod > 0 && strafe <= strafemod)
			{
				strafe += strafespeed;
				if (!CheckPlayerOnGround())
					strafe += strafespeed*3;
			}

			// reset view
			// when no movement keys are pressed or if player starts to move slow
			if ((!(KeyDown(BT_MOVELEFT) || GetPlayerInput(-1, INPUT_SIDEMOVE) < 0)
				&& !(KeyDown(BT_MOVERIGHT) || GetPlayerInput(-1, INPUT_SIDEMOVE) > 0))
				|| GetPlayerMoveSpeed(0) < 1.1)
			{
				if (strafe < 0)
				{
					strafe += strafespeed;
				}

				if (strafe > 0)
				{
					strafe -= strafespeed;
				}
			}

			// limits
			if (strafe < -1.0)
				strafe = -1.0;

			if (strafe > 1.0)
				strafe = 1.0;
			
			// ground limit
			if(CheckPlayerOnGround() && strafe < -0.00341797)
				strafe += strafespeed*7;
				
			if(CheckPlayerOnGround() && strafe > 0.00341797)
				strafe -= strafespeed*7;

			// tilt!
			ChangeActorRoll(0, strafe, TRUE);
			
			//For debugging:
			//hudmessage(f:strafe; HUDMSG_PLAIN, 9001, CR_GREEN, 0.3, 0.3, 0.1);
			//hudmessage(i:strafemod; HUDMSG_PLAIN, 9002, CR_GREEN, 0.8, 0.3, 0.1);
		}
		else
		{
			ChangeActorRoll(0, 0, TRUE);
		}
		Delay(1);
	}
}
